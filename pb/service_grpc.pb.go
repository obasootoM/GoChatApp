// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.2
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChapAppClient is the client API for ChapApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChapAppClient interface {
	CreatStream(ctx context.Context, in *Connect, opts ...grpc.CallOption) (ChapApp_CreatStreamClient, error)
	BroadCastStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error)
}

type chapAppClient struct {
	cc grpc.ClientConnInterface
}

func NewChapAppClient(cc grpc.ClientConnInterface) ChapAppClient {
	return &chapAppClient{cc}
}

func (c *chapAppClient) CreatStream(ctx context.Context, in *Connect, opts ...grpc.CallOption) (ChapApp_CreatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChapApp_ServiceDesc.Streams[0], "/pb.ChapApp/CreatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chapAppCreatStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChapApp_CreatStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chapAppCreatStreamClient struct {
	grpc.ClientStream
}

func (x *chapAppCreatStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chapAppClient) BroadCastStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/pb.ChapApp/BroadCastStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChapAppServer is the server API for ChapApp service.
// All implementations must embed UnimplementedChapAppServer
// for forward compatibility
type ChapAppServer interface {
	CreatStream(*Connect, ChapApp_CreatStreamServer) error
	BroadCastStream(context.Context, *Message) (*Close, error)
	mustEmbedUnimplementedChapAppServer()
}

// UnimplementedChapAppServer must be embedded to have forward compatible implementations.
type UnimplementedChapAppServer struct {
}

func (UnimplementedChapAppServer) CreatStream(*Connect, ChapApp_CreatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreatStream not implemented")
}
func (UnimplementedChapAppServer) BroadCastStream(context.Context, *Message) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadCastStream not implemented")
}
func (UnimplementedChapAppServer) mustEmbedUnimplementedChapAppServer() {}

// UnsafeChapAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChapAppServer will
// result in compilation errors.
type UnsafeChapAppServer interface {
	mustEmbedUnimplementedChapAppServer()
}

func RegisterChapAppServer(s grpc.ServiceRegistrar, srv ChapAppServer) {
	s.RegisterService(&ChapApp_ServiceDesc, srv)
}

func _ChapApp_CreatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Connect)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChapAppServer).CreatStream(m, &chapAppCreatStreamServer{stream})
}

type ChapApp_CreatStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chapAppCreatStreamServer struct {
	grpc.ServerStream
}

func (x *chapAppCreatStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChapApp_BroadCastStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapAppServer).BroadCastStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChapApp/BroadCastStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapAppServer).BroadCastStream(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// ChapApp_ServiceDesc is the grpc.ServiceDesc for ChapApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChapApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChapApp",
	HandlerType: (*ChapAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCastStream",
			Handler:    _ChapApp_BroadCastStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreatStream",
			Handler:       _ChapApp_CreatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
